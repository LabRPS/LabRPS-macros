# -*- coding: utf-8 -*-
# (c) Koffi Daniel 2024

__Name__ = 'Deodatis1998LocationDistribution'
__Comment__ = 'Creates location distribution feature according to Deodatis 1996'
__Author__ = 'Koffi Daniel'
__Version__ = '0.1.0'
__Date__ = '15/04/2024'
__License__ = ''
__Web__ = ''
__Wiki__ = ''
__Icon__ = ''
__Help__ = 'Select an object'
__Status__ = 'alpha'
__Requires__ = ''
__Contact__ = 'https://forum.freecadweb.org/memberlist.php?mode=viewprofile&u=2364'
__Communication__ = ''
__Files__ = 

import LabRPS
from LabRPS import Vector as vec

import WindLab
import WindLabObjects

#install the WindLab plugin with all its plugged features
installResuslt = WindLab.installPlugin("WindLabPlugin")

doc = LabRPS.newDocument()

# create new simulation with default name "Simulation"
sim = WindLabObjects.makeSimulation(doc)
    
# check if the simulation is successfully created
if not sim:
    LabRPS.Console.PrintError("The simulation does not exist.\n")
    return None
    
# set simulation parameters
sim.NumberOfFrequency = 2048
sim.MaxFrequency = "0.64 Hz" # 4 rad/s;
sim.FrequencyIncrement = "0.00031 Hz" # 0.00195 rad/s;
sim.TimeIncrement = "0.785 s"
sim.NumberOfTimeIncrements = 9651

# create new location distribution in the simulation called "Simulation"
loc = WindLabObjects.makeFeature("SimulationPoints", "Simulation", "Location Distribution",  "General Distribution")
    
# check if the created location distribution feature is null
if not loc:
    LabRPS.Console.PrintError("Error on creating the location distribution.\n")
    return None

# find all the feature which are location distribution feature
myFeatures = sim.findAllWindLabFeaturesOfThisType('WindLabAPI::WindLabFeatureLocationDistribution')

#find all rps types
rpsTypes = sim.getRPSTypesOfPluggableFeatures()
print(rpsTypes)

v1 = vec(0, 0, 35)
v2 = vec(0, 0, 40)
v3 = vec(0, 0, 140)
loc.Locations = [v1, v2, v3]

# run the method "computeLocationCoordinateMatrixP3" of the feature and store the result.
# Note that here, this method will be called for the active location distribution feature
locRes = sim.computeLocationCoordinateMatrixP3()

if LabRPS.GuiUp and showGui:
    import WindLabGui
    #show the location coordinate in Alphaplot
    WindLabGui.WindLabPythonPluginUtilities.showArray(sim.getSimulationData().numberOfSpatialPosition, 4, locRes)
    loc.ViewObject.Document.activeView().viewAxonometric()
    loc.ViewObject.Document.activeView().fitAll()

    import numpy
    import matplotlib.pyplot as plt
    arr = numpy.asarray(locRes)
    fig, ax = plt.subplots()
    fig.suptitle('Location Distribution')
    ax.plot(arr[:,0], arr[:,3], 'o-')
    ax.set_xlabel('Simulation Point Number')
    ax.set_ylabel('Height (m)')
    ax.grid(True)
    plt.show()
    
doc.recompute()